========================================================================
[스택]

push: stack pointer위치를 데이터 크기 또는 레지스터 크기만큼 뺀 후 해당 위치에 값을 저장한다.
	  지역변수 할당이라고 생각하면 됨

mov			eax,		10
push		eax
-> 스택에 10이라는 값이 할당됨

sub			esp,		4
mov			eax,		10
mov			[esp],		eax
-> 위와 동일한 코드

esp : stack pointer로 함수내에서 지역변수 할당시에 사용하는 레지스터이다. 항상 스택의 꼭대기를 가리키고 있다.
ebp : base pointer로 주로 함수 시작 후 esp의 값을 저장할 때 사용하는 레지스터이다. (stack pointer의 밑바닥을 가리키게됨)
      함수의 프롤로그, 에필로그시에 사용된다.

[함수 프롤로그] 
func:
	push		ebp					;	기존 ebp값을 저장해놓는다. (기존 ebp 값을 보존하기 위해 스택에 대피시켜 놓는다.)
	mov			ebp,		esp		;	현재 ebp가 stack pointer와 동일하게 맞춘다.


[함수 에필로그]
	mov			esp,		ebp		;	stack pointer 위치를 원래위치로 가져다 놓는다. (지역변수의 소멸)
	pop			ebp					;	함수 시작시 저장해두었던 ebp의 값을 원래대로 복구한다. (대피했던 )


사용하는 이유 : 함수에서 ebp를 변경해놓으면 다른 함수에서 ebp를 사용시 값이 변경되어 있기 때문에 프로그래밍에 큰 혼란을 초래할 수 있기때문
꼭 함수 프롤로그시에 사용하지 않더라도 함수 종료시에는 함수 시작시에 사용했던 값으로 복구를 해줘야한다.

비주얼 스튜디오나 nasm으로 assembly 코딩시 ebp 위치를 함수 종료시 원상태로 복구 안해놓으면 오류가 발생하는 것을 확인할 수 있다.

========================================================================
[함수 호출과 종료]

call : 해당 레이블로 점프한다. (함수 호출)
	   점프하기전의 함수의 스택에 복귀할 주소를 스택에 넣어준 후 

ESP = ESP - 4
M[ESP] = 복귀주소
EIP = 실행된 함수의 주소

[비주얼 스튜디오 어셈블리 디버깅]

24: 	  push			11
0078187E  push			11
25: 	  call			add
00781880  call          add (07813DEh)  
26: 	  push	        12
00781885  push          12
27: 	  call	        add2
00781887  call          add2 (07813E3h)  
31: 	  add		    esp,		8
0078188C  add           esp,        8  

1. 24번째 줄 실행  
   ESP = 96 -> 11 저장
2. 25번째 줄 실행
   ESP = 92 -> 복귀주소 0x00781885 저장
3. 함수 종료
   EIP = M[ESP] 복귀 주소로 점프
   ESP = ESP + 4
   ESP = 96
4. 26번째 줄 실행
   ESP = 96 -> 12 저장
   .. 와 같이 진행됨

ret : 복귀 주소로 점프한다. (함수 종료)

EIP = M[ESP]
ESP = ESP + 4

========================================================================
[함수 인자 전달 및 사용]

main:
		push	10
		push	20
		call	func
		pop		eax
		pop		eax

func:
		push	ebp
		mov		ebp,	esp

		mov		eax,	[ebp + 8]		; 20
		mov		ebx,	[ebp + 12]		; 10

		mov		esp,	ebp
		pop		ebp

[ebp + 0] -> 기존 ebp 주소
[ebp + 4] -> 복귀 주소
[ebp + 8, 12, 16...] -> 매개변수

========================================================================
[함수 결과값 반환]

main:
		call	func
		mov		ebx,		eax		; 반환값 사용

func:
		mov		eax,		10
		ret

8086 어셈블리에서는 eax 레지스터를 반환값으로 사용한다.


========================================================================
[C함수에서 어셈블리로 인자전달]

max(3, 5);

push 5
push 3
call max
mov		eax,		[ebp + 8]	;	3
mov		eax,		[ebp + 12]	;	5

